/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/course-round": {
    /**
     * Returns a list of course rounds.
     * @description The API will return any course round from this or previous term that should be surveyed. A course round might be updated and course rounds might be added to this list as time progresses during the term.
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["PageLimit"];
          offset?: components["parameters"]["PageOffset"];
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            "application/json": components["schemas"]["CourseRound"][];
          };
        };
        401: components["responses"]["401"];
        default: components["responses"]["default"];
      };
    };
  };
  "/course-round/{ladokRoundId}": {
    /** Returns information about this course round. */
    get: {
      parameters: {
        path: {
          ladokRoundId: string;
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            "application/json": components["schemas"]["CourseRound"];
          };
        };
        401: components["responses"]["401"];
        default: components["responses"]["default"];
      };
    };
  };
  "/course-round/{ladokRoundId}/students": {
    /** Returns list of students belonging to the course round. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["PageLimit"];
          offset?: components["parameters"]["PageOffset"];
        };
        path: {
          ladokRoundId: string;
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            "application/json": components["schemas"]["StudentParticipation"][];
          };
        };
        401: components["responses"]["401"];
        default: components["responses"]["default"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CourseRound: {
      /** @description Ladok equivalent: UtbildningstillfalleUID, KurstillfalleUID */
      id: string;
      ladokCourseId: string;
      ladokCourseRoundId: string;
      /** @description We currently use LADOK UID as canvasSisId (sis_course_id in Canvas API) */
      canvasSisId: string;
      name: string;
      /** @description utbildningskod */
      courseCode: string;
      /**
       * @description The main language used for this course. Determines the language used to generate report.
       * @enum {string}
       */
      language: "en" | "sv";
      /** @description Marked true if the course has been canceled (duh!). */
      canceled?: boolean;
      /**
       * Format: date
       * @description The date when the course ends.
       */
      endDate: string;
      /** @description The year this course round was held (YYYY). Note: there are course rounds that span multiple years and might be displayes as YYYY-YYYY */
      displayYear: string;
      /** @description The school at KTH this course belongs to. */
      organization: components["schemas"]["OrgEntity"];
      /** @description The specific institution at a school this course is attached to. */
      institution: components["schemas"]["OrgEntity"];
      /** @description Long form text including linebreaks */
      courseGoal: string;
      /** @enum {string} */
      period: "P1" | "P2" | "P3" | "P4";
      /** @description Credits awarded for this course */
      credits: string;
      /** @description Person who is responsible for examination (source: LADOK). */
      courseExaminor: components["schemas"]["CourseUser"];
      /** @description Person who is responsible for the course (source: ???). */
      courseResponsible?: components["schemas"]["CourseUser"];
      /** @description List of teachers connected to this course (source: ???) */
      courseTeachers: components["schemas"]["CourseUser"][];
      nrofRegisteredStudents: number;
      nrofReportedResults: number;
      /** @description Kurs, betygsfördelning */
      gradingDistribution?: {
        [key: string]: unknown;
      };
      programs: components["schemas"]["ProgramRound"][];
      modules: components["schemas"]["CourseModule"][];
    };
    StudentParticipation: {
      /** @description Ladok equivalent: `${StudentUID}.${KurstillfalleUID}` */
      id: string;
      ladokStudentId: string;
      ladokCourseId: string;
      ladokCourseRoundId: string;
      /** @description We currently use kthUserId as canvasSisId */
      canvasSisId: string;
      /** @description Full Name of user */
      name: string;
      /** Format: email */
      email: string;
      roles: ("TBD" | "...")[];
      locations: string[];
      program: components["schemas"]["ProgramRound"];
    };
    ProgramRound: {
      code: string;
      semester: string;
      /** @description Year and term when program round started */
      startPeriod: string;
      name: string;
      /** @description Calculate by using startPeriod and current period. */
      studyYear: number;
      specification: string;
      /** @enum {string} */
      required?: "TBD" | "...";
    };
    CourseModule: {
      /** @description Ladok UID for module instance (UtbildningsinstansUID?) */
      id?: string;
      code: string;
      name: string;
      /** @description Credits awarded for this module. */
      credits: string;
      gradingScheme: string[];
      nrofReportedResults: number;
      /** @description Moment, betygsfördelning */
      gradingDistribution?: {
        [key: string]: unknown;
      };
    };
    CourseUser: {
      /** @description This is the username used to log in to KTH SSO. */
      userName: string;
      /** @description This is the unique identifier for a user at KTH. */
      kthUserId: string;
      /** Format: email */
      email: string;
      fullName: string;
    };
    OrgEntity: {
      /** @description The name of the organization entity to be displayed in report. */
      displayName: string;
      /** @description KTH-specific code used for organization entity. */
      displayCode: string;
      /** @description The unique identifier used by the federated login server to refer to the organization entity. */
      kthId: string;
    };
  };
  responses: {
    /** @description Unauthorized */
    401: {
      content: never;
    };
    /** @description Invalid request */
    default: {
      content: {
        "application/json": {
          message?: string;
        };
      };
    };
  };
  parameters: {
    /** @description Nrof items per page */
    PageLimit?: number;
    /** @description Start on page (zero based) */
    PageOffset?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
