import {
  hashStudentId,
  convertToCourseInstanceArchivingCode,
  startTermFromArchivingCode,

} from "../../src/functions/ladok-events/utils";

describe("hashStudentId", () => {
  test("creates a stable hash", async () => {
    const res1 = await hashStudentId("e806c109-ce0e-11e7-ab7e-c364338b4317");
    const res2 = await hashStudentId("e806c109-ce0e-11e7-ab7e-c364338b4317");
    expect(res1).toEqual(res2);
  });
});

describe("convertToCourseInstanceArchivingCode", () => {
  test("can create a code using ladokInstanceCode", async () => {
    const ladokCourseRoundInfo = {
      courseCode: "TDA123",
      courseInstanceCode: "23456",
    };
    const koppsInfo = {
      round: {
        startTerm: "20211",
      },
    };
    const code = convertToCourseInstanceArchivingCode(ladokCourseRoundInfo, koppsInfo);
    expect(code).toEqual("TDA123 HT21 23456");
  });
  
  test("can create a code using kopps ladokRoundId", async () => {
    const ladokCourseRoundInfo = {
      courseCode: "TDA123",
      courseInstanceCode: "23456",
    };
    const koppsInfo = {
      round: {
        startTerm: "20211",
        ladokRoundId: "1",
      },
    };
    const code = convertToCourseInstanceArchivingCode(ladokCourseRoundInfo, koppsInfo);
    expect(code).toEqual("TDA123 HT21 1");
  });
});


describe("startTermFromArchivingCode", () => {
  test("can get start term from code generated by convertToCourseInstanceArchivingCode", async () => {
    const ladokCourseRoundInfo = {
      courseCode: "TDA123",
      courseInstanceCode: "23456",
    };
    const koppsInfo = {
      round: {
        startTerm: "20211",
      },
    };
    const code = convertToCourseInstanceArchivingCode(ladokCourseRoundInfo, koppsInfo);
    const startTerm = startTermFromArchivingCode(code);
    expect(startTerm).toEqual("HT21");
  });
});
